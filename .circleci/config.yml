version: 2.1

executors:
  node14:
    docker:
      - image: cimg/node:14.18.0
    working_directory: ~/project

commands:
  # env-prod:
  #   description: "test .env variable"
  #   steps:
  #     - checkout
  #     - run:
  #         name: "What a number in this .env"
  #         command: touch .env ; echo "API_URL=$API_URL_PROD" >> .env
  #     - run:
  #         name: "Check file .env"
  #         command: ls -la ; cat .env
  # env-dev:
  #   description: "test .env variable"
  #   steps:
  #     - checkout
  #     - run:
  #         name: "What a number in this .env"
  #         command: touch .env ; echo "API_URL=$API_URL" >> .env ;
  #     - run:
  #         name: "Check file .env"
  #         command: cat .env
  build:
    description: 'Builds the project'
    steps:
      - checkout
      - restore_cache:
          keys:
            # Find a yarn.lock cache
            - v1-npm-deps-{{ checksum "yarn.lock" }}
            # Fallback cache to be used
            - v1-npm-deps-
      - run:
          name: Install Dependencies
          command: yarn install
      - save_cache:
          key: v1-npm-deps-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
      - run:
          name: Firebase install
          command: yarn add firebase-tools
      - run:
          name: Build for current environment.
          command: yarn build
          build:
      - run:
          name: check that firebase.json
          command: cat firebase.json
  deploy:
    description: 'Deploy project to the designated environment'
    parameters:
      env:
        type: string
        default: 'dev'
    steps:
      - checkout
      - run:
          name: Firebase Deploy
          command: ./node_modules/.bin/firebase deploy --token "$FIREBASE_TOKEN" --non-interactive --only hosting:<< parameters.env >>

jobs:
  build-deploy-dev:
    executor: node14
    steps:
      # - env-dev
      - build
      - deploy:
          env: 'dev'
  build-deploy-production:
    executor: node14
    steps:
      # - env-prod
      - build
      - deploy:
          env: 'prod'

workflows:
  version: 2
  dev:
    jobs:
      - build-deploy-dev:
          filters:
            branches:
              only: dev
  production:
    jobs:
      - build-deploy-production:
          filters:
            branches:
              only: main